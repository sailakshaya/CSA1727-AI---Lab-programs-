import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  
        self.h = 0  
        self.f = 0  

    def __eq__(self, other):
        return self.position == other.position

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])  

def astar(start, goal, grid):
    open_set = []
    closed_set = set()
    start_node = Node(start)
    goal_node = Node(goal)
    
    heapq.heappush(open_set, (start_node.f, start_node))

    while open_set:
        current_node = heapq.heappop(open_set)[1]
        closed_set.add(current_node.position)

        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  

        for new_position in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            if node_position in closed_set or not (0 <= node_position[0] < len(grid)) or not (0 <= node_position[1] < len(grid[0])) or grid[node_position[0]][node_position[1]] != 0:
                continue

            neighbor = Node(node_position, current_node)
            neighbor.g = current_node.g + 1
            neighbor.h = heuristic(neighbor.position, goal_node.position)
            neighbor.f = neighbor.g + neighbor.h

            if any(open_node[1] == neighbor and open_node[1].g < neighbor.g for open_node in open_set):
                continue

            heapq.heappush(open_set, (neighbor.f, neighbor))

    return None  


grid = [[0, 0, 0, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0],
        [0, 0, 1, 0]]
start = (0, 0)
goal = (3, 3)
path = astar(start, goal, grid)
print("Path found:", path)

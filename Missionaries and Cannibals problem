from collections import deque

# State is represented as (M_left, C_left, Boat_position)
# Boat_position: 1 if on left bank, 0 if on right

def is_valid(m_left, c_left, m_right, c_right):
    # Missionaries should never be outnumbered
    if (m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0):
        return False
    if (m_left > 0 and m_left < c_left):
        return False
    if (m_right > 0 and m_right < c_right):
        return False
    return True

def get_successors(state):
    m_left, c_left, boat = state
    moves = [(1,0), (2,0), (0,1), (0,2), (1,1)]  # possible moves
    successors = []

    for m, c in moves:
        if boat == 1:
            new_state = (m_left - m, c_left - c, 0)
        else:
            new_state = (m_left + m, c_left + c, 1)

        m_right = 3 - new_state[0]
        c_right = 3 - new_state[1]

        if is_valid(new_state[0], new_state[1], m_right, c_right):
            successors.append(new_state)

    return successors

def bfs(start, goal):
    visited = set()
    queue = deque([(start, [])])

    while queue:
        state, path = queue.popleft()
        if state in visited:
            continue
        visited.add(state)

        if state == goal:
            return path + [state]

        for succ in get_successors(state):
            queue.append((succ, path + [state]))

    return None

# Initial and goal states
start_state = (3, 3, 1)  # 3 missionaries, 3 cannibals on left bank, boat on left
goal_state = (0, 0, 0)   # everyone moved to right bank

# Solve the problem
solution = bfs(start_state, goal_state)

# Print solution steps
if solution:
    print("Steps to solve the Missionaries and Cannibals problem:\n")
    for i, state in enumerate(solution):
        m_left, c_left, boat = state
        m_right = 3 - m_left
        c_right = 3 - c_left
        side = "Left" if boat == 1 else "Right"
        print(f"Step {i}: Left[{m_left}M, {c_left}C] | Boat: {side} | Right[{m_right}M, {c_right}C]")
else:
    print("No solution found.")
